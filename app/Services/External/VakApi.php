<?php

namespace App\Services\External;

use App\Helpers\BotLogHelpers;
use GuzzleHttp\Client;
use http\Exception\RuntimeException;

class VakApi
{
    private $url;

    private $apiKey;
    private $proxy = 'http://VtZNR9Hb:nXC9nQ45@45.147.246.121:64614';

    public function __construct($apiKey)
    {
        $this->apiKey = $apiKey;
        $this->url = 'https://moresms.net/api/';
    }

    /**
     * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏
     */
    private function sendProxyRequest($data, $method = 'GET', $endpoint = '', $count = 0)
    {
        if ($count == 5) {
            throw new RuntimeException('–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π!');
        }

        try {
            $client = new Client(['base_uri' => $this->url]);

            if ($method === 'GET') {
                $response = $client->get($endpoint . '?' . $data, [
                    'proxy' => $this->proxy,
                ]);
            } else {
                $response = $client->post($endpoint . '?' . $data, [
                    'proxy' => $this->proxy,
                ]);
            }

            return $response->getBody()->getContents();

        } catch (\Throwable $e) {
            if (strpos($e->getMessage(), 'cURL') !== false) {
                return $this->sendProxyRequest($data, $method, $endpoint, $count + 1);
            }
            throw new RuntimeException($e->getMessage());
        }
    }

    //–±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    public function getBalance()
    {
        try {
            $requestParam = [
                'apiKey' => $this->apiKey
            ];

            $result = $this->sendProxyRequest(http_build_query($requestParam), 'GET', __FUNCTION__);

            $result = json_decode($result, true);
            $this->checkError($result, $this->apiKey);
            return $result;
        } catch (\RuntimeException $r) {
            BotLogHelpers::notifyBotLog('(üü¢E ' . __FUNCTION__ . ' Vak): ' . $r->getMessage());
            throw new \RuntimeException('–û—à–∏–±–∫–∞ –≤ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞');
        }
    }

    //—Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω –∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
    public function getCountryList()
    {
        try {
            $requestParam = [
                'apiKey' => $this->apiKey
            ];

            $result = $this->sendProxyRequest(http_build_query($requestParam), 'GET', __FUNCTION__);

            $result = json_decode($result, true);
            $this->checkError($result, $this->apiKey);
            return $result;
        } catch (\RuntimeException $r) {
            BotLogHelpers::notifyBotLog('(üü¢E ' . __FUNCTION__ . ' Vak): ' . $r->getMessage());
            throw new \RuntimeException('–û—à–∏–±–∫–∞ –≤ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç—Ä–∞–Ω.');
        }
    }

//    //–º–µ—Ç–æ–¥ –Ω–∞ API v0!!!!
//    public function getPrices($country)
//    {
////        try {
//            $requestParam = [
//                'api_key' => $this->apiKey,
//                'action' => __FUNCTION__,
//                'country' => $country,
//            ];
//
//            $client = new Client(['base_uri' => 'https://vak-sms.ru/stubs/handler_api.php']);
//            $response = $client->get('?' . http_build_query($requestParam));
//
//            $result = $response->getBody()->getContents();
//
//            $result = json_decode($result, true);
//        $this->checkError($result, $this->apiKey);
//            return $result;
////        } catch (\RuntimeException $r) {
////            BotLogHelpers::notifyBotLog('(üü¢E ' . __FUNCTION__ . ' Vak): ' . $r->getMessage());
////            throw new \RuntimeException('–û—à–∏–±–∫–∞ –≤ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞');
////        }
//    }

    //–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ —Å–ø–∏—Å–∫–æ–º
    public function getCountNumbersList($country)
    {
        try {
            $requestParam = [
                'apiKey' => $this->apiKey,
                'country' => $country,
            ];

            $result = $this->sendProxyRequest(http_build_query($requestParam), 'GET', __FUNCTION__);

            $result = json_decode($result, true);
            $this->checkError($result, $this->apiKey);
            return $result;
        } catch (\RuntimeException $r) {
            BotLogHelpers::notifyBotLog('(üü¢E ' . __FUNCTION__ . ' Vak): ' . $r->getMessage());
            throw new \RuntimeException('–û—à–∏–±–∫–∞ –≤ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤.');
        }
    }

    //–∫–æ–ª–∏—á–µ—Ç—Å–æ–≤ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞
    public function getCountNumber($service, $country, $price = '')
    {
        try {
            $requestParam = [
                'apiKey' => $this->apiKey,
                'service' => $service,
                'country' => $country,
                'price' => $price,
            ];

            $result = $this->sendProxyRequest(http_build_query($requestParam), 'GET', __FUNCTION__);

            $result = json_decode($result, true);
            $this->checkError($result, $this->apiKey);
            return $result;
        } catch (\RuntimeException $r) {
            BotLogHelpers::notifyBotLog('(üü¢E ' . __FUNCTION__ . ' Vak): ' . $r->getMessage());
            throw new \RuntimeException('–û—à–∏–±–∫–∞ –≤ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.');
        }
    }

    //–ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞, –ø–æ–∫–∞ –±–µ–∑ rent –∏ –º—É–ª—å—Ç–∏–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ (–ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–æ–±–∞–≤–∏—Ç—å $softId)
    public function getNumber($service, $country, $softId = 76)
    {
        try {
            $requestParam = [
                'apiKey' => $this->apiKey,
                'service' => $service,
                'country' => $country,
                'softId' => $softId, //–Ω–æ–º–µ—Ä —Å–æ—Ñ—Ç–∞
            ];

            $result = $this->sendProxyRequest(http_build_query($requestParam), 'GET', __FUNCTION__);

            $result = json_decode($result, true);
            $this->checkError($result, $this->apiKey);
            return $result;
        } catch (\RuntimeException $r) {
            BotLogHelpers::notifyBotLog('(üü¢E ' . __FUNCTION__ . ' Vak): ' . $r->getMessage());
            throw new \RuntimeException('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤, –ø–æ–ø—Ä–æ–±—É–∏ÃÜ—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –¥—Ä—É–≥–æ–π —Å—Ç—Ä–∞–Ω–æ–π.');
        }
    }

//    //–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞, —Ö–∑ –ø–æ–∫–∞ –∫–∞–∫ —é–∑–∞—Ç—å
//    public function prolongNumber($service, $tel)
//    {
//        try {
//            $requestParam = [
//                'apiKey' => $this->apiKey,
//                'service' => $service,
//                'tel' => $tel,//–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–Ω–µ–µ –±—ã–ª –ø–æ–ª—É—á–µ–Ω –∫–æ–¥ –∏–∑ —Å–º—Å
//            ];
//
//            $client = new Client(['base_uri' => $this->url]);
//            $response = $client->get(__FUNCTION__ . '?' . http_build_query($requestParam));
//
//            $result = $response->getBody()->getContents();
//            $result = json_decode($result, true);
//            $this->checkError($result, $this->apiKey);
//            return $result;
//        } catch (\RuntimeException $r) {
//            BotLogHelpers::notifyBotLog('(üü¢E ' . __FUNCTION__ . ' Vak): ' . $r->getMessage());
//            throw new \RuntimeException('–û—à–∏–±–∫–∞ –≤ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞');
//        }
//    }

    /**
     * –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
     * status=send - –ï—â–µ —Å–º—Å
     * {"status": "ready"}
     *
     * status=end - –æ—Ç–º–µ–Ω–∞ –Ω–æ–º–µ—Ä–∞
     * {"status": "smsReceived"}  # –Ω–∞ –¥–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —É–∂–µ –ø–æ–ª—É—á–µ–Ω –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –æ—Ç–º–µ–Ω–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.
     * {"status": "waitSMS"}  # –Ω–∞ –¥–∞–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–º—Å, –æ—Ç–º–µ–Ω–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞. –û–∂–∏–¥–∞–π—Ç–µ –∫–æ–¥.
     * {"status": "update"}  # —Å—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω.
     *
     * status=bad - –Ω–æ–º–µ—Ä —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω, –∑–∞–±–∞–Ω–µ–Ω
     * {"status": "update"}  # —Å—Ç–∞—Ç—É—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω
     * {"status": "waitSMS"}  # —Å—Ç–∞—Ç—É—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω, —Ç.–∫ —Å–µ—Ä–≤–∏—Å –æ–∂–∏–¥–∞–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—É—é —Å–º—Å
     *
     * @param $status
     * @param $idNum
     * @return mixed
     * @throws \GuzzleHttp\Exception\GuzzleException
     */
    public function setStatus($idNum, $status)
    {
        try {
            $requestParam = [
                'apiKey' => $this->apiKey,
                'status' => $status,//–°—Ç–∞—Ç—É—Å –æ–ø–µ—Ä–∞—Ü–∏–∏.
                'idNum' => $idNum,//ID –æ–ø–µ—Ä–∞—Ü–∏–∏
            ];

            $result = $this->sendProxyRequest(http_build_query($requestParam), 'GET', __FUNCTION__);

            $result = json_decode($result, true);
            $this->checkError($result, $this->apiKey);
            return $result;
        } catch (\RuntimeException $r) {
            BotLogHelpers::notifyBotLog('(üü¢E ' . __FUNCTION__ . ' Vak): ' . $r->getMessage());
            throw new \RuntimeException('–û—à–∏–±–∫–∞ –≤ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞.');
        }
    }

    /**
     * all = false
     * {"smsCode": null}  # —Å–µ—Ä–≤–∏—Å –æ–∂–∏–¥–∞–µ—Ç –°–ú–°
     * {"smsCode": "CODE"}  # –∫–æ–¥ –ø–æ–ª—É—á–µ–Ω, –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π "CODE" —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏, type=str
     *
     * all = true
     * {"smsCode": ["CODE1", "CODE2"]}  # –°–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–µ–Ω—ã—Ö –∫–æ–¥–æ–≤, type=list(str)
     *
     * @param $status
     * @param $idNum
     * @param bool $all
     * @return mixed
     * @throws \GuzzleHttp\Exception\GuzzleException
     */
    public function getSmsCode($idNum, bool $all = true)
    {
        try {
            $requestParam = [
                'apiKey' => $this->apiKey,
                'idNum' => $idNum,//ID –æ–ø–µ—Ä–∞—Ü–∏–∏
                'all' => $all, //–ü–∞—Ä–∞–º–µ—Ç—Ä —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –ø–æ–ª—É—á–∏—Ç—å –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –∫–æ–¥–æ–≤
            ];

            $result = $this->sendProxyRequest(http_build_query($requestParam), 'GET', __FUNCTION__);

            $result = json_decode($result, true);
            $this->checkError($result, $this->apiKey);
            return $result;
        } catch (\RuntimeException $r) {
            BotLogHelpers::notifyBotLog('(üü¢E ' . __FUNCTION__ . ' Vak): ' . $r->getMessage());
            throw new \RuntimeException('–û—à–∏–±–∫–∞ –≤ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞');
        }
    }

    /**
     * @param $result
     * @return void
     * @throws RequestError
     */
    public function checkError($result, $api_key)
    {
        if (isset($result['error'])) {
            $responsError = new ErrorCodes($result['error'], $api_key);
            $check = $responsError->checkExist($result['error']);
            if ($check) {
                throw new RequestError($result['error'], $api_key);
            }
        }
    }
}
